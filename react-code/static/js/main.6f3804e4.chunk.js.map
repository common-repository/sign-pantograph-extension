{"version":3,"sources":["Utils/globalConstants.js","Backend/Redux/reducers/globalReducers.js","Backend/Redux/reducers/index.js","Backend/Redux/store/configureStore.js","Assets/Lang/en/translations.js","Assets/Lang/jp/translations.js","Assets/Lang/cn/translations.js","Assets/Lang/vn/translations.js","Backend/Web3/index.js","Backend/Redux/actions/globalActions.js","Utils/globalFunction.js","Backend/Redux/lib/constants.js","Assets/Lang/i18n.js","Utils/mainRoutes.js","Frontend/Container/CoreLayoutContainer/index.js","serviceWorker.js","index.js","Backend/Redux/lib/initState.js","Backend/Redux/lib/reducerConfig.js","Utils/globalRedux.js"],"names":["KEY_STORE","METAMASK","USER_AUTHENTICATION","METAMASK_STATUS","LOADING","NOWEB3","ERROR","LOCKED","CHANGEACCOUNT","READY","TOMO_NETWORK","key","type","metamask","createReducer","init","SET_METAMASK","state","action","payload","userAuth","SET_USER_AUTHENTICATION","rootReducer","combineReducers","globalReducers","form","formReducer","middleWare","thunkMiddleware","store","createStore","applyMiddleware","module","exports","translations","bigdecimal","require","window","Web3","web3","tomoWeb3","Web3Services","this","getNetwork","netId","providers","HttpProvider","address","nonce","p1","Promise","resolve","reject","personal","sign","fromUtf8","err","signature","error","p2","setTimeout","race","a","currentProvider","enable","then","accounts","catch","rawTransaction","eth","estimateGas","res","version","getTransactionCount","getBalance","balance","console","log","convertWeiToBalance","isString","data","isValidAddressFormat","startsWith","length","strValue","iDecimal","multiplyNum","BigDecimal","Math","pow","convertValue","String","divide","toString","setMetaMask","setUserAuthentication","saveDataLocal","localStorage","setItem","JSON","stringify","getDataLocal","parse","getItem","keyMirror","options","fallbackLng","whitelist","ns","defaultNS","keySeparator","interpolation","escapeValue","formatSeparator","react","wait","resources","en","jp","cn","vn","Loading","routes","path","name","component","Loadable","loader","loading","exact","CoreLayoutContainer","map","route","idx","render","props","React","Component","Boolean","location","hostname","match","App","storageRedux","actions","promiseArr","item","checkLocalStoreToRedux","all","ReduxServices","refreshMetaMask","on","PureComponent","ReactDOM","i18n","use","LanguageDetector","document","getElementById","navigator","serviceWorker","ready","registration","unregister","initState","initialState","handlers","hasOwnProperty","storeRedux","keyStoreNew","initData","dispatch","reduxState","getState","subscribe","checkMetaMask","newStatus","Object","assign","status","network","account","e","networkNew","networkParse","parseInt","findNetwork","find","itm","getAccounts","toLowerCase","newMetamaskStatus","isSigned","checkIsSigned","globalActions","resetUser","callback","callbackErr","signMetaMask","onSignMessage","content","newUserLogin","newMetaMask","Swal","fire","width","text","icon","showConfirmButton","enableMetaMask"],"mappings":"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","file":"static/js/main.6f3804e4.chunk.js","sourcesContent":["export const PATH = {\n  PAGE_NOT_FOUND: '/404'\n}\n\nexport const KEY_STORE = {\n  METAMASK: 'METAMASK',\n  USER_AUTHENTICATION: 'USER_AUTHENTICATION'\n}\n\nexport const METAMASK_STATUS = {\n  LOADING: 'loading',\n  NOWEB3: 'noweb3',\n  ERROR: 'error',\n  LOCKED: 'locked',\n  CHANGEACCOUNT: 'changeaccount',\n  READY: 'ready'\n}\n\nexport const TOMO_NETWORK = [\n  { key: 88, type: 'Mainnet' },\n  { key: 89, type: 'Testnet' }\n]","import key from '../lib/constants'\nimport init from '../lib/initState'\nimport createReducer from '../lib/reducerConfig'\n\nexport const metamask = createReducer(init.metamask, {\n  [key.SET_METAMASK] (state, action) {\n    return action.payload\n  }\n})\n\nexport const userAuth = createReducer(init.userAuth, {\n  [key.SET_USER_AUTHENTICATION] (state, action) {\n    return action.payload\n  }\n})","import * as globalReducers from './globalReducers'\nimport { combineReducers } from 'redux'\nimport { reducer as formReducer } from 'redux-form'\n\nconst rootReducer = combineReducers({\n  ...globalReducers,\n  form: formReducer\n})\n\nexport default rootReducer","import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport rootReducer from '../reducers'\nimport logger from 'redux-logger'\n\n// Middleware\nconst middleWare = [thunkMiddleware]\n\n// Logger\nif (process.env.REACT_APP_ENV !== 'production') {\n  // middleWare.push(logger)\n}\n\nconst store = createStore(rootReducer, applyMiddleware(...middleWare))\n\nexport { store }","module.exports = {\n  translations: {\n    // metamask\n    'metamask.pleaseInstallFirst': 'Please install MetaMask first!',\n    'metamask.youNeedSignMessage': 'You need to sign the message to be able to use system!',\n    'metamask.youHaveBeenBlocked': `System has detected that you have withdrawn money from smartcontract. \n    Therefore, for security reason, your account has been locked. Please contact us if you have any questions.`,\n    'metamask.onlySupportNetwork': `Tomorrowsprice only supports {{network}} network in Ethereum blockchain. Please check your network.`,\n  }\n}","module.exports = {\n  translations: {\n    \n  }\n}","module.exports = {\n  translations: {\n    \n  }\n}","module.exports = {\n  translations: {\n    \n  }\n}","import { convertBalanceToWei, convertWeiToBalance } from 'Utils/globalFunction'\n\nconst bigdecimal = require('bigdecimal')\nconst window = require('global/window')\nconst Web3 = require('web3')\nconst web3 = window.tomoWeb3 || window.web3\n\nexport {Web3 as Web3};\nexport {web3 as web3};\nexport default class Web3Services {\n  static async web3Read () {\n    const netId = await this.getNetwork()\n    return new Web3(new Web3.providers.HttpProvider(netId == 89 ? 'https://rpc.testnet.tomochain.com' : 'https://rpc.tomochain.com'));\n  }\n  static isString = (data) => {\n    return data && typeof data === 'string'\n  }\n  static isValidAddressFormat = (address) => {\n    return address && Web3Services.isString(address) && address.startsWith('0x') && address.length === 42\n  }\n  static async onSignMessage (address, nonce) {\n    // console.log(323232, nonce, address)\n    let p1 = new Promise((resolve, reject) => {\n      try {\n        web3.personal.sign(web3.fromUtf8(nonce), address, (err, signature) => {\n          if (err) return resolve(err)\n          return resolve({ address, signature })\n        })\n      } catch (error) {\n        return reject(error)\n      }\n    })\n    let p2 = new Promise(function (resolve, reject) {\n      setTimeout(() => reject('Request timeout'), 30000)\n    })\n    return Promise.race([p1, p2])\n  }\n\n  static async enableMetaMask () {\n    return new Promise(async (resolve, reject) => {\n      web3.currentProvider.enable()\n        .then((accounts) => {\n          resolve(accounts)\n        })\n        .catch((error) => {\n          reject(error)\n        })\n    })\n  }\n\n  static async estimateGas (rawTransaction) {\n    return new Promise(async (resolve, reject) => {\n      web3.eth.estimateGas(rawTransaction, (err, res) => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve(res)\n        }\n      })\n    })\n  }\n\n  static async getNetwork () {\n    return new Promise(async (resolve, reject) => {\n      web3.version.getNetwork((err, netId) => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve(netId)\n        }\n      })\n    })\n  }\n\n  static async getNonce (address) {\n    return new Promise(async (resolve, reject) => {\n      web3.eth.getTransactionCount(address, (err, res) => {\n        if (err) {\n          resolve(0)\n        }\n        resolve(res)\n      })\n    })\n  }\n  static async getTomoBalance (address) {\n    return new Promise(async (resolve, reject) => {\n      let currentWeb3 = new Web3(web3.currentProvider)\n      currentWeb3.eth.getBalance(address, (err, balance) => {\n        if (err) {\n          resolve(0)\n        }\n        console.log('---balance---',balance)\n        resolve(balance >0 ? convertWeiToBalance(balance) : 0)\n      })\n    })\n  }\n  static convertWeiToBalance = (strValue, iDecimal = 18) => {\n    var multiplyNum = new bigdecimal.BigDecimal(Math.pow(10, iDecimal))\n    var convertValue = new bigdecimal.BigDecimal(String(strValue))\n    return convertValue.divide(multiplyNum).toString()\n  }\n}\n","import key from '../lib/constants'\nimport { KEY_STORE } from 'Utils/globalConstants'\nimport { saveDataLocal } from 'Utils/globalFunction'\n\nexport function setMetaMask (metamask) {\n  return {\n    type: key.SET_METAMASK,\n    payload: metamask\n  }\n}\n\nexport function setUserAuthentication (userAuth) {\n  saveDataLocal(KEY_STORE.USER_AUTHENTICATION, userAuth)\n  return {\n    type: key.SET_USER_AUTHENTICATION,\n    payload: userAuth\n  }\n}\n","import moment from 'moment'\nconst bigdecimal = require('bigdecimal')\n\nexport const saveDataLocal = (key, data) => {\n  localStorage.setItem(key, JSON.stringify(data))\n}\nexport const getDataLocal = (key) => {\n  return JSON.parse(localStorage.getItem(key))\n}\n\nexport const removeDataLocal = (key) => {\n  localStorage.removeItem(key)\n}\n\nexport const isObject = (value) => {\n  return value && typeof value === 'object' && value.constructor === Object\n}\n\nexport const roundingNumber = (number, rounding = 8) => {\n  const powNumber = Math.pow(10, parseInt(rounding))\n  return Math.floor(number * powNumber) / powNumber\n}\n\nexport const numberWithCommasInt = (strNumber) => {\n  return strNumber ? strNumber.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') : 0\n}\n\nexport const formatNumberDisplay = (strNumber, decimalFormat = 8) => {\n  let first = '0'\n  let second = ''\n  decimalFormat = decimalFormat < 8 ? decimalFormat : 8\n  isNaN(Number(strNumber)) && (strNumber = 0)\n  strNumber = Number(strNumber).toFixed(10)\n  let arrDigit = String(strNumber).split('.')\n  if (arrDigit.length > 1 && decimalFormat > 0) {\n    first = numberWithCommasInt(arrDigit[0])\n    second = arrDigit[1].substring(0, decimalFormat).replace(/\\.?0+$/, '')\n  } else {\n    first = numberWithCommasInt(arrDigit[0])\n  }\n  return {\n    firstNumber: first,\n    secondNumber: second\n  }\n}\n\nexport const formatFiatDisplay = (strNumber, decimalFormat = 6) => {\n  let first = '0'\n  let second = '00'\n  decimalFormat = decimalFormat < 6 ? decimalFormat : 6\n  isNaN(Number(strNumber)) && (strNumber = 0)\n  strNumber = Number(strNumber).toFixed(10)\n  let arrDigit = String(strNumber).split('.')\n  if (arrDigit.length > 1) {\n    first = numberWithCommasInt(arrDigit[0])\n    second = arrDigit[1].substring(0, decimalFormat).replace(/\\.?0+$/, '')\n  } else {\n    first = numberWithCommasInt(arrDigit[0])\n  }\n  return {\n    firstNumber: first,\n    secondNumber: second\n  }\n}\n\nexport const formatPriceDisplay = (strNumber, decimalFormat = 8) => {\n  let first = '0'\n  let second = ''\n  decimalFormat = decimalFormat < 8 ? decimalFormat : 8\n  isNaN(Number(strNumber)) && (strNumber = 0)\n  strNumber = Number(strNumber).toFixed(10)\n  let arrDigit = String(strNumber).split('.')\n  if (arrDigit.length > 1 && decimalFormat > 0) {\n    first = arrDigit[0]\n    second = arrDigit[1].substring(0, decimalFormat).replace(/\\.?0+$/, '')\n    if (second.length === 0) {\n      second = '00'\n    } else if (second.length === 1) {\n      second = second + '0'\n    }\n  } else {\n    first = arrDigit[0]\n  }\n  return {\n    firstNumber: first,\n    secondNumber: second\n  }\n}\n\nexport const validateNumber = (strNumber) => {\n  const reg = /^[0-9]+(\\.)?[0-9]*$/\n  return reg.test(strNumber)\n}\n\nexport const validateEmail = (strEmail) => {\n  const reg = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i\n  return reg.test(strEmail)\n}\n\nexport const countDots = (strString, strLetter) => {\n  return (String(strString).match(RegExp(strLetter, 'g')) || []).length\n}\n\nexport const copyText = (data) => {\n  let textField = document.createElement('textarea')\n  textField.innerText = data\n  document.body.appendChild(textField)\n  textField.select()\n  document.execCommand('copy')\n  textField.remove()\n}\n\nexport const convertSmallNumberToRegular = (x) => {\n  if (Math.abs(x) < 1.0) {\n    let e = parseInt(x.toString().split('e-')[1])\n    if (e) {\n      x *= Math.pow(10, e - 1)\n      x = '0.' + (new Array(e)).join('0') + x.toString().substring(2)\n    }\n  } else {\n    let e = parseInt(x.toString().split('+')[1])\n    if (e > 20) {\n      e -= 20\n      x /= Math.pow(10, e)\n      x += (new Array(e + 1)).join('0')\n    }\n  }\n  return x\n}\n\nexport const convertBalanceToWei = (strValue, iDecimal = 18) => {\n  var multiplyNum = new bigdecimal.BigDecimal(Math.pow(10, iDecimal))\n  var convertValue = new bigdecimal.BigDecimal(String(strValue))\n  return multiplyNum.multiply(convertValue).toString().split('.')[0]\n}\n\nexport const convertWeiToBalance = (strValue, iDecimal = 18) => {\n  var multiplyNum = new bigdecimal.BigDecimal(Math.pow(10, iDecimal))\n  var convertValue = new bigdecimal.BigDecimal(String(strValue))\n  return convertValue.divide(multiplyNum).toString()\n}\n\nexport const convertTimestampToDate = (strTimestamp) => {\n  let strTime = '--:--'\n  if (strTimestamp) {\n    if (String(strTimestamp).length > 10) {\n      strTime = moment(strTimestamp).format('YYYY.MM.DD')\n    } else {\n      strTime = moment(strTimestamp * 1000).format('YYYY.MM.DD')\n    }\n  }\n  return strTime\n}\n\nexport const scientificToDecimal = (num) => {\n  const sign = Math.sign(num)\n  // if the number is in scientific notation remove it\n  if (/\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num)) {\n    const zero = '0'\n    const parts = String(num).toLowerCase().split('e') // split into coeff and exponent\n    const e = parts.pop() // store the exponential part\n    let l = Math.abs(e) // get the number of zeros\n    const direction = e / l // use to determine the zeroes on the left or right\n    const coeffArray = parts[0].split('.')\n\n    if (direction === -1) {\n      coeffArray[0] = Math.abs(coeffArray[0])\n      num = zero + '.' + new Array(l).join(zero) + coeffArray.join('')\n    } else {\n      const dec = coeffArray[1]\n      if (dec) l = l - dec.length\n      num = coeffArray.join('') + new Array(l + 1).join(zero)\n    }\n  }\n\n  if (sign < 0) {\n    num = -num\n  }\n\n  return num\n}\n\nexport const removeDuplicateObjectByKey = (arr, key) => {\n  const unique = arr\n    .map(e => e[key].toString())\n\n    // store the keys of the unique objects\n    .map((e, i, final) => final.indexOf(e) === i && i)\n\n    // eliminate the dead keys & store unique objects\n    .filter(e => arr[e]).map(e => arr[e])\n\n  return unique\n}","import keyMirror from 'key-mirror'\n\nexport default keyMirror({\n  SET_METAMASK: null,\n  SET_USER_AUTHENTICATION: null\n})","import i18n from 'i18next'\nimport LanguageDetector from 'i18next-browser-languagedetector'\nimport en from './en/translations'\nimport jp from './jp/translations'\nimport cn from './cn/translations'\nimport vn from './vn/translations'\n\nconst options = {\n  fallbackLng: 'en',\n  whitelist: ['en', 'jp', 'cn'],\n  // have a common namespace used around the full app\n  ns: ['translations'],\n  defaultNS: 'translations',\n\n  keySeparator: false, // we use content as keys\n\n  interpolation: {\n    escapeValue: false, // not needed for react!!\n    formatSeparator: ','\n  },\n\n  react: {\n    wait: true\n  },\n\n  resources: {\n    en, jp, cn, vn\n  }\n}\n\nexport default () => {\n  i18n\n    .use(LanguageDetector)\n    .init(options)\n  return i18n\n}\n","import React from 'react'\nimport Loadable from 'react-loadable'\n\nconst Loading = () => {\n  return <div></div>\n}\n\nconst MainScreen = Loadable({\n  loader: () => import('../Frontend/Screen/MainScreen'),\n  loading: Loading,\n})\nconst ReceiveLink = Loadable({\n  loader: () => import('../Frontend/Screen/receive'),\n  loading: Loading,\n})\n\nconst NotFound = Loadable({\n  loader: () => import('../Frontend/Screen/NotFoundPage'),\n  loading: Loading,\n})\n\nconst routes = [\n  { path: '/', name: 'Home', component: MainScreen },\n  { path: '/receive-link', exact: true, name: 'ReceiveLink', component: ReceiveLink },\n  { path: '*', name: '404', component: NotFound }\n]\n\nexport default routes","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n// import \"./antd.css\";\n// import \"./styles.css\";\nimport routes from \"Utils/mainRoutes\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\nclass CoreLayoutContainer extends React.Component {\n  render() {\n    return (\n      <Switch>\n        {routes.map((route, idx) => {\n          return route.component ? (\n            <Route\n              key={idx}\n              path={route.path}\n              exact={route.exact}\n              name={route.name}\n              render={(props) => <route.component {...props} />}\n            />\n          ) : null;\n        })}\n      </Switch>\n    );\n  }\n}\n\nexport default CoreLayoutContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { I18nextProvider } from 'react-i18next'\nimport i18n from './Assets/Lang/i18n'\nimport { store } from './Backend/Redux/store/configureStore'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport CoreLayoutContainer from 'Frontend/Container/CoreLayoutContainer'\nimport * as serviceWorker from './serviceWorker'\nimport { KEY_STORE } from 'Utils/globalConstants'\nimport * as actions from 'Backend/Redux/actions/globalActions'\nimport init from 'Backend/Redux/lib/initState'\nimport { checkLocalStoreToRedux } from 'Backend/Redux/lib/reducerConfig'\nimport ReduxServices from 'Utils/globalRedux'\nimport 'antd/dist/antd.css';\nimport {web3} from 'Backend/Web3'\n\nexport default class App extends React.PureComponent {\n  async componentDidMount () {\n    let storageRedux = [\n      { key: KEY_STORE.USER_AUTHENTICATION, action: actions.setUserAuthentication, init: init.userAuth }\n    ]\n    const promiseArr = storageRedux.map(async (item) => {\n      await checkLocalStoreToRedux(store, item.key, item.action, item.init)\n    })\n    await Promise.all(promiseArr)\n\n    setTimeout(() => {\n      ReduxServices.refreshMetaMask();\n    }, 500);\n    if(web3) {\n      web3.currentProvider.on(\"accountsChanged\", function (accounts) {\n        console.log(\"accountsChanged\");\n        ReduxServices.refreshMetaMask();\n      });\n      web3.currentProvider.on(\"networkChanged\", function (accounts) {\n        ReduxServices.refreshMetaMask();\n      });\n      web3.currentProvider.on(\"chainChanged\", function (accounts) {\n        ReduxServices.refreshMetaMask();\n      });\n    }\n  }\n  render () {\n    return (\n      <Provider store={store}>\n        <Router>\n          <Switch>\n            <Route path=\"/\" name=\"Home\" component={CoreLayoutContainer} />\n          </Switch>\n        </Router>\n      </Provider>\n    )\n  }\n}\n\nReactDOM.render(<I18nextProvider i18n={ i18n() }>\n  <App />\n</I18nextProvider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","var initState = {\n  metamask: {},\n  userAuth: {}\n}\n\nexport default initState","import { getDataLocal } from 'Utils/globalFunction'\n\nexport default function createReducer (initialState, handlers) {\n  return function reducer (state = initialState, action) {\n    if (handlers.hasOwnProperty(action.type)) {\n      return handlers[action.type](state, action)\n    } else {\n      return state\n    }\n  }\n}\n\nexport const checkLocalStoreToRedux = (storeRedux, keyStoreNew, action, initData) => {\n  return new Promise((resolve, reject) => {\n    try {\n      let data = getDataLocal(keyStoreNew)\n      if (data) {\n        data !== initData && storeRedux.dispatch(action(data))\n      }\n      resolve()\n    } catch (error) {\n      return resolve()\n    }\n  })\n}","import Web3Services from 'Backend/Web3'\nimport Swal from 'sweetalert2'\nimport { METAMASK_STATUS, TOMO_NETWORK } from 'Utils/globalConstants'\nimport { store } from 'Backend/Redux/store/configureStore'\nimport * as globalActions from 'Backend/Redux/actions/globalActions'\nconst window = require('global/window')\nconst web3 = window.tomoWeb3 || window.web3\nlet reduxState = store.getState()\nstore.subscribe(() => {\n  reduxState = store.getState()\n})\n\nexport default class ReduxServices {\n  static async refreshMetaMask () {\n    const checkMetaMask = () => {\n      return new Promise ((resolve, reject) => {\n        const { metamask } = reduxState\n        let newStatus = Object.assign({}, metamask)\n        try {\n          if (typeof web3 === 'undefined') {\n            newStatus.status = METAMASK_STATUS.NOWEB3\n            newStatus.network = 0\n            delete newStatus.account\n            resolve(newStatus)\n          } else {\n            // Get metamask ether network\n            let p1 = new Promise((resolve, reject) => {\n              try {\n                web3.version.getNetwork((err, network) => {\n                  if (err) return reject(err)\n                  return resolve(network)\n                })\n              } catch (e) {\n                return reject(e)\n              }\n            })\n            // Close p1 promise if over time\n            let p2 = new Promise(function (resolve, reject) {\n              setTimeout(() => {\n                return reject('request timeout')\n              }, 3000)\n            })\n            Promise.race([p1, p2]).then((networkNew) => {\n              const networkParse = parseInt(networkNew)\n              const findNetwork = TOMO_NETWORK.find(itm => itm.key === networkParse)\n              let network = (findNetwork ? findNetwork.key : 'Unknown')\n\n              web3.eth.getAccounts((err, accounts) => {\n                if (err) {\n                  newStatus.status = METAMASK_STATUS.ERROR\n                  newStatus.network = network\n                  delete newStatus.account\n                  resolve(newStatus)\n                } else if (accounts && accounts.length > 0) {\n                  newStatus.status = METAMASK_STATUS.READY\n                  newStatus.network = network\n                  newStatus.account = accounts[0].toLowerCase()\n                  resolve(newStatus)\n                } else {\n                  newStatus.status = METAMASK_STATUS.LOADING\n                  newStatus.network = 0\n                  delete newStatus.account\n                  resolve(newStatus)\n                }\n              })\n            }).catch((e) => {\n              newStatus.status = METAMASK_STATUS.LOCKED\n              newStatus.network = 0\n              delete newStatus.account\n              resolve(newStatus)\n            })\n          }\n        } catch (error) {\n          newStatus.status = METAMASK_STATUS.ERROR\n          newStatus.network = 0\n          delete newStatus.account\n          resolve(newStatus)\n        }\n      })\n    }\n    const { userAuth, metamask } = reduxState\n    const newMetamaskStatus = await checkMetaMask()\n    let isSigned = this.checkIsSigned(userAuth, newMetamaskStatus)\n\n    if (((newMetamaskStatus && newMetamaskStatus.status) !== metamask.status) ||\n      ((newMetamaskStatus && newMetamaskStatus.isSigned) !== isSigned) ||\n      (newMetamaskStatus && newMetamaskStatus.account !== metamask.account)) {\n      newMetamaskStatus.isSigned = isSigned\n      store.dispatch(globalActions.setMetaMask(newMetamaskStatus))\n\n      if (newMetamaskStatus.status === METAMASK_STATUS.LOADING || (newMetamaskStatus.account && userAuth.address && newMetamaskStatus.account !== userAuth.address)) {\n        this.resetUser()\n      }\n    }\n  }\n  static checkIsSigned (userAuth, metamask) {\n    if ((userAuth && userAuth.address && userAuth.address.length > 0) && metamask) {\n      return (metamask.account === userAuth.address.toLowerCase())\n    } else {\n      return false\n    }\n  }\n  static loginMetamask (callback = null, i18n = null, callbackErr = null) {\n    return new Promise (async (resolve, reject) => {\n      const signMetaMask = (callback = null) => {\n        return new Promise (async (resolve, reject) => {\n          try {\n            const { metamask } = reduxState\n            if (metamask && metamask.account) {\n              let message = 'Sign Message'\n              let content = await Web3Services.onSignMessage(metamask.account, message.data ? message.data : '')\n              if (content && content.address && content.signature) {\n                let newUserLogin = Object.assign({}, { address: content.address, signature: content.signature + '|' + content.address })\n                store.dispatch(globalActions.setUserAuthentication(newUserLogin))\n\n                // Check already login user\n                const newMetaMask = Object.assign({}, metamask)\n                newMetaMask.isSigned = true\n                store.dispatch(globalActions.setMetaMask(newMetaMask))\n\n                callback && callback()\n                return resolve(null)\n              } else {\n                Swal.fire({\n                  width: '300px',\n                  text: i18n('metamask.youNeedSignMessage'),\n                  icon: 'warning',\n                  showConfirmButton: false\n                })\n                store.dispatch(globalActions.setUserAuthentication({}))\n                callbackErr && callbackErr()\n                return resolve()\n              }\n            }\n            return resolve()\n          } catch (error) {\n            reject(error)\n          }\n        })\n      }\n\n      const { metamask, userAuth } = reduxState\n      try {\n        // Check if MetaMask is installed\n        if (metamask.status === TOMO_NETWORK.NOWEB3) {\n          Swal.fire({\n            width: '300px',\n            text: i18n('metamask.pleaseInstallFirst'),\n            icon: 'info',\n            showConfirmButton: false\n          })\n          return resolve(null)\n        }\n\n        if (metamask.account && metamask.account.length > 0) {\n          let isSigned = this.checkIsSigned(userAuth, metamask)\n          if (!isSigned) {\n            signMetaMask(callback)\n          } else {\n            callback && callback()\n            return resolve(null)\n          }\n        } else {\n          let resEnable = await Web3Services.enableMetaMask()\n          if (resEnable.length > 0) {\n            signMetaMask(callback)\n          }\n          return resolve(null)\n        }\n      } catch (error) {\n        return resolve(error)\n      }\n    })\n  }\n\n  static resetUser () {\n    return new Promise (async (resolve, reject) => {\n      try {\n        store.dispatch(globalActions.setUserAuthentication({}))\n        resolve()\n      } catch (error) {\n        resolve(error)\n      }\n    })\n  }\n}"],"sourceRoot":""}